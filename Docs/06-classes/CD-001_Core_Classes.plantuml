@startuml CD-001_Core_Classes
!theme vibrant
title Core Classes - DYTUtils

package "Service Layer" {
    class JsonManager {
        + loadJsonFromDocument(documentTitle: string, fileName: string): Promise<Object>
        + saveJsonToDocument(documentTitle: string, fileName: string, jsonData: Object, options?: SaveOptions): Promise<SaveResult>
    }

    class DocumentHelper {
        __ Public API for JsonManager & other high-level services __
        + searchDocumentByTitle(documentTitle: string): Promise<DocumentSearchResult> <<UC-003>>
        + downloadFileFromDocument(docId: string, fileName: string): Promise<FileDownloadResult> <<UC-015>>
        + uploadFileToDocument(docId: string, fileName: string, fileContent: any, contentType: string): Promise<FileInfo> <<UC-016>>
        + ensureDocumentExists(documentTitle: string, documentType: string): Promise<DocumentInfo> <<UC-010>>
        + reserveDocument(docId: string): Promise<void> <<UC-007>>
        + unreserveDocument(docId: string): Promise<void> <<UC-008>>
        + deleteFileFromDocument(docId: string, fileName: string): Promise<void> <<UC-009>>
        --
        __ Building Block / Utility Methods (can also be public) __
        + createDocument(documentTitle: string, documentType: string): Promise<DocumentInfo> <<UC-006>>
        + getDocumentFilesMetadata(docId: string): Promise<FileInfo[]> <<UC-013>>
        + getDownloadTicketForFile(docId: string, fileName: string): Promise<DownloadTicketInfo> <<UC-004>>
        + getUploadTicketForFile(fileName: string): Promise<UploadTicketInfo> <<UC-005>>
        + downloadFileFromFCS(fcsDownloadUrl: string): Promise<any> <<UC-014>>
        + uploadFileContentToFCS(fcsUploadUrl: string, fileContent: any, contentType: string): Promise<void> <<UC-011>>
        + attachFileToDocument(docId: string, fileName: string, fileReceipt: string, contentType: string): Promise<FileInfo> <<UC-017>>
    }

    class Connector3DSpace {
        + callService(options: ServiceCallOptions, payload?: any): Promise<any>
        + getCsrfToken(): Promise<string> <<UC-018>>
    }
}

package "Data Transfer Objects" {
    class SaveOptions {
        ensureDocExists?: boolean
        lockDoc?: boolean
        overwrite?: boolean
        documentType?: string
    }
    class SaveResult {
        docId: string
        fileInfo: FileInfo
    }
    class DocumentSearchResult {
        docId: string
        documentInfo: DocumentInfo
    }
    class FileDownloadResult {
        fileContent: any
        fileInfo: FileInfo
    }
    class DocumentInfo {
        id: string
        title: string
        type: string
        revision?: string
        state?: string
        // ... other attributes
    }
    class FileInfo {
        id: string
        name: string
        title: string // often same as name
        mimeType: string
        // ... other attributes
    }
    class DownloadTicketInfo {
        fcsDownloadUrl: string
        fileInfo: FileInfo // or just fileId/name
    }
    class UploadTicketInfo {
        fcsUploadUrl: string
        fileReceipt: string
    }
    class ServiceCallOptions {
        url: string
        method: string
        headers?: object
        params?: object
        body?: any // for non-JSON payloads or direct data
        csrf?: boolean
        responseType?: string // 'json', 'text', 'blob', 'arraybuffer'
        skipCsrf?: boolean // for FCS calls
    }
}

JsonManager ..> DocumentHelper : uses
DocumentHelper ..> Connector3DSpace : uses

note right of JsonManager
  Orchestruje načítání/ukládání JSON
  dat pomocí DocumentHelpera.
end note

note right of DocumentHelper
  Poskytuje fasádu pro všechny operace
  s dokumenty a soubory v 3DEXPERIENCE.
  Orchestruje volání na Connector3DSpace.
end note

note right of Connector3DSpace
  Zpracovává skutečnou HTTP komunikaci
  s API platformy 3DEXPERIENCE a FCS.
  Spravuje CSRF tokeny.
end note

@enduml